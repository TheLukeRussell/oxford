{"version":3,"sources":["components/Header.js","components/InstaCard.js","components/Services.js","components/Barbers.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","id","sticky","expand","Brand","className","href","Toggle","aria-controls","Collapse","Nav","Link","NavDropdown","title","Item","Divider","InstaCard","src","alt","Services","Barbers","Card","style","width","Img","Body","Title","Text","Button","variant","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qWA8CeA,EA1CA,WACb,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,SAASC,OAAO,MAAMC,OAAO,MACtC,kBAACH,EAAA,EAAOI,MAAR,CAAcC,UAAU,OAAOC,KAAK,SAApC,OAUA,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,qBAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBR,GAAG,yBAClB,kBAACS,EAAA,EAAD,CAAKL,UAAU,eACb,kBAACK,EAAA,EAAIC,KAAL,CAAUV,GAAG,OAAOK,KAAK,KAAzB,QAGA,kBAACI,EAAA,EAAIC,KAAL,CAAUV,GAAG,OAAOK,KAAK,KAAzB,gBAGA,kBAACI,EAAA,EAAIC,KAAL,CAAUV,GAAG,OAAOK,KAAK,KAAzB,qBAGA,kBAACI,EAAA,EAAIC,KAAL,CAAUV,GAAG,OAAOK,KAAK,KAAzB,SAGA,kBAACM,EAAA,EAAD,aAAaX,GAAG,OAAOY,MAAM,QAA7B,KAAuC,sBACrC,kBAACD,EAAA,EAAYE,KAAb,CAAkBR,KAAK,eAAvB,yBACA,kBAACM,EAAA,EAAYE,KAAb,CAAkBR,KAAK,eAAvB,cACA,kBAACM,EAAA,EAAYG,QAAb,MACA,kBAACH,EAAA,EAAYE,KAAb,CAAkBR,KAAK,eAAvB,uBCvBCU,G,YAVG,WAChB,OACE,yBACEC,IAAI,gFACJC,IAAI,aACJb,UAAU,YCqBDc,G,MA3BE,WACf,OACE,yBAAKd,UAAU,qCACb,yBAAKJ,GAAG,eAAeI,UAAU,UACjC,yBAAKJ,GAAG,iBAAiBI,UAAU,SACjC,wCACA,4BACE,mEACA,0DACA,qDACA,gDACA,2CACA,+CAEF,yBAAKJ,GAAG,OAAOI,UAAU,mBACzB,qDACA,4BACE,wBAAIA,UAAU,eAAd,yBACA,wBAAIA,UAAU,eAAd,uBACA,wBAAIA,UAAU,eAAd,8BAGJ,yBAAKJ,GAAG,gBAAgBI,UAAU,a,gBCJzBe,G,MAjBC,WACd,OACE,kBAACC,EAAA,EAAD,CAAMhB,UAAU,MAAMiB,MAAO,CAAEC,MAAO,UACpC,kBAACF,EAAA,EAAKG,IAAN,CAAUP,IAAI,4JACd,kBAACI,EAAA,EAAKI,KAAN,KACE,kBAACJ,EAAA,EAAKK,MAAN,oBACA,kBAACL,EAAA,EAAKM,KAAN,gPAKA,kBAACC,EAAA,EAAD,CAAQC,QAAQ,WAAhB,oBCKOC,MAZf,WACE,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,MAEA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCHc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.40a53487.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\n\nconst Header = () => {\n  return (\n    <div>\n      <Navbar id='navbar' sticky='top' expand='lg'>\n        <Navbar.Brand className='mr-5' href='#home'>\n          OXB\n          {/* <img\n            src='https://d1g145x70srn7h.cloudfront.net/files/510fb821d05e84d873843916bd556cedd5610f35/original.jpeg'\n            width='50'\n            height='50'\n            className='d-inline-block align-top'\n            alt='React Bootstrap logo'\n          /> */}\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls='basic-navbar-nav' />\n        <Navbar.Collapse id='responsive-navbar-nav'>\n          <Nav className='mr-auto nav'>\n            <Nav.Link id='text' href='#'>\n              Home\n            </Nav.Link>\n            <Nav.Link id='text' href='#'>\n              Shop Gallery\n            </Nav.Link>\n            <Nav.Link id='text' href='#'>\n              Book Appointments\n            </Nav.Link>\n            <Nav.Link id='text' href='#'>\n              Staff\n            </Nav.Link>\n            <NavDropdown id='text' title='More' id='basic-nav-dropdown'>\n              <NavDropdown.Item href='#action/3.1'>Private Party Request</NavDropdown.Item>\n              <NavDropdown.Item href='#action/3.2'>Contact Us</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href='#action/3.4'>Join Our Team</NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport './InstaCard.css';\n\nconst InstaCard = () => {\n  return (\n    <img\n      src='https://www.stleos.uq.edu.au/wp-content/uploads/2016/08/image-placeholder.png'\n      alt='Card image'\n      className='image'\n    />\n  );\n};\n\nexport default InstaCard;\n","import React from 'react';\nimport './Services.css';\n\nconst Services = () => {\n  return (\n    <div className='row no-gutters services-container'>\n      <div id='service-left' className='col-4'></div>\n      <div id='service-middle' className='col-4'>\n        <h1>Services</h1>\n        <ul>\n          <li>The Oxford Classic (Hair Cut) ~ $32</li>\n          <li>Haircut & Beard Trim ~ $45</li>\n          <li>Haircut & Shave ~ $60</li>\n          <li>Beard Trim ~ $25</li>\n          <li>Shave ~ $35</li>\n          <li>Kids Cut ~ $25</li>\n        </ul>\n        <div id='line' className='row no-gutters'></div>\n        <h3>** Add On Services **</h3>\n        <ul>\n          <li className='bottom-text'>Skin Fade Add-On ~ $5</li>\n          <li className='bottom-text'>Shampoo Add-On ~ $5</li>\n          <li className='bottom-text'>Facial Area Waxing ~ $10</li>\n        </ul>\n      </div>\n      <div id='service-right' className='col-4'></div>\n    </div>\n  );\n};\n\nexport default Services;\n","import React from 'react';\nimport { Card, Button } from 'react-bootstrap';\nimport './Barbers.css';\n\nconst Barbers = () => {\n  return (\n    <Card className='m-5' style={{ width: '18rem' }}>\n      <Card.Img src='https://prd-wret.s3.us-west-2.amazonaws.com/assets/palladium/production/s3fs-public/styles/full_width/public/thumbnails/image/placeholder-profile_1.png' />\n      <Card.Body>\n        <Card.Title>Barber Name</Card.Title>\n        <Card.Text>\n          Lorem ipsum dolor, sit amet consectetur adipisicing elit. Aut, commodi officia? Laborum\n          fuga nam, nostrum quisquam nihil fugiat, unde fugit veniam consequatur eligendi quasi\n          perferendis neque natus voluptatem, temporibus veritatis.\n        </Card.Text>\n        <Button variant='primary'>Book With...</Button>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default Barbers;\n","import React from 'react';\nimport Header from './components/Header';\nimport './App.css';\nimport InstaCard from './components/InstaCard';\nimport Video from './components/Video';\nimport Services from './components/Services';\nimport Barbers from './components/Barbers';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Header />\n      {/* <Video /> */}\n      <InstaCard />\n      <Services />\n      <Barbers />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}